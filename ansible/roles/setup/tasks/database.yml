---

- name: Install PostgreSQL yum repository
  become: yes
  become_user: root
  yum: name=http://yum.postgresql.org/9.5/redhat/rhel-7-x86_64/pgdg-redhat95-9.5-2.noarch.rpm state=installed
#  yum: name=https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-6-x86_64/pgdg-ami201503-95-9.5-2.noarch.rpm state=installed
  tags: install database

- name: Install PostgreSQL (install via yum as per advice on postgresql website)
  become: yes
  become_user: root
  yum: name={{ item }} state=installed
  with_items:
    - postgresql95-server
    - postgresql95-contrib
    - postgresql95-devel
    - python-psycopg2
  tags: install database

- name: add postgres bin path to system path
  become: yes
  become_user: root
  shell: echo 'export PATH=$PATH:/usr/pgsql-9.5/bin' > '/etc/profile.d/postgres.sh'
  tags: install database

- name: Initialise database with options
  become: yes
  become_user: root
  shell: PGSETUP_INITDB_OPTIONS='--encoding=UTF8 --data-checksums' /usr/pgsql-9.5/bin/postgresql95-setup initdb
           creates=/var/lib/pgsql/9.5/data/postgresql.conf
#  shell: service postgresql-9.5 initdb
  tags: install database

- name: postgres performance and logging tweaks to postgresql.conf
  become: yes
  become_user: postgres
  blockinfile:
    dest: /var/lib/pgsql/9.5/data/postgresql.conf
    block: |
      listen_addresses = '*'
      log_destination = 'csvlog'
      logging_collector = on
      log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
      log_rotation_age = 1d
      log_rotation_size = 10MB
      log_min_duration_statement = 50
      log_checkpoints = on
      log_connections = on
      log_disconnections = on
      log_lock_waits = on
      log_temp_files = 0
      shared_buffers = 512MB             # should be 25% of RAM (up to max of 8GB)
      work_mem = 32MB                    # should be 2 * RAM / max_connections (32 to 64mb)
      maintenance_work_mem = 256MB       # should be 10% of RAM (up to max of 1GB)
      effective_cache_size = 512MB       # should be RAM / 2
      max_connections = 64               # should be no more than 400
      wal_buffers = 16MB                 # should be fixed at 16MB
      checkpoint_completion_target = 0.9 # should be fixed at 0.9
      checkpoint_timeout = 10min         # should be 10-30m (restart takes ~ 20% of this time)
      effective_io_concurrency = 4       # set to 4 for AWS, or no of channels/disks
      random_page_cost = 1.3             # RAID 10 = 3, SAN=2, Amazon EBS = 1.5
      wal_level = hot_standby            # for replication
  tags: install database

- name: postgresql - setup security in pg_hba.conf (insertbefore to override default settings)
  become: yes
  become_user: postgres
  blockinfile:
    dest: /var/lib/pgsql/9.5/data/pg_hba.conf
    insertbefore: BOF
    block: |
      local   all             postgres                              peer
      local   all             {{ db_user }}                                md5
      host    all             all             0.0.0.0/0             md5
      host    all             all             ::1/128               md5
  tags: install database

- name: Ensure the PostgreSQL service is running
  become: yes
  become_user: root
  service: name=postgresql-9.5 state=started enabled=yes
  tags: install database

- name: Create database
  become: yes
  become_user: postgres
  postgresql_db: name={{ db_name }} state=present
  tags: install database

- name: Ensure django user has access to the database with all privileges
  become: yes
  become_user: postgres
  postgresql_user: db={{ db_name }} name={{ db_user }} password={{ db_password }} priv=ALL role_attr_flags=CREATEDB state=present
  tags: install database

- name: Start firewalld to add new rules
  become: yes
  become_user: root
  service: name=firewalld state=restarted
  tags: install database

- name: Allow port 5432 through firewall
  become: yes
  become_user: root
  firewalld: port=5432/tcp zone=public immediate=yes permanent=true state=enabled
  tags: install database


- name: Install pgbadger perl prerequisites
  become: yes
  become_user: root
  cpanm: name=Text::CSV_XS system_lib=yes
  tags: install pgbadger

- name: Install pgbadger log analyzer - Create temp directory
  file: path="{{ base_dir }}/pgbadger" state=directory
  tags: install pgbadger

- name: Install pgbadger log analyzer - get tarball
  get_url: url=https://github.com/dalibo/pgbadger/archive/v8.0.tar.gz
           dest="{{ base_dir }}/pgbadger/pgbadger-8.0.tar.gz" mode=0444
  tags: install pgbadger

- name: Install pgbadger log analyzer - Unarchive tarball
  unarchive: src="{{ base_dir }}/pgbadger/pgbadger-8.0.tar.gz" dest="{{ base_dir }}/pgbadger/"
             owner={{ username }} copy=no creates={{ base_dir }}/pgbadger/pgbadger-8.0
  tags: install pgbadger

- name: Install pgbadger - Configure makefile
  command: perl Makefile.PL
  args:
    chdir: "{{ base_dir }}/pgbadger/pgbadger-8.0"
    creates: "{{ base_dir }}/pgbadger/pgbadger-8.0/Makefile"
  tags: install pgbadger

- name: Install pgbadger - Make
  command: make
  args:
    chdir: "{{ base_dir }}/pgbadger/pgbadger-8.0"
    creates: "{{ base_dir }}/pgbadger/pgbadger-8.0/blib/script/pgbadger"
  tags: install pgbadger

- name: Install pgbadger - Make Install
  become: yes
  become_user: root
  args:
    chdir: "{{ base_dir }}/pgbadger/pgbadger-8.0"
    creates: "/usr/local/bin/pgbadger"
  command: make install
  tags: install pgbadger
